// Code generated by fastssz. DO NOT EDIT.
// Hash: 067f2f1f68da3ff07343df39e5b8380caa31f3e4560355ab96cdb3dfb9362faa
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorCommittee object
func (v *ValidatorCommittee) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorCommittee object to a target array
func (v *ValidatorCommittee) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'CommitteeID'
	dst = append(dst, v.CommitteeID[:]...)

	// Offset (1) 'ValidatorShares'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(v.ValidatorShares) * 350

	// Field (1) 'ValidatorShares'
	if size := len(v.ValidatorShares); size > 13 {
		err = ssz.ErrListTooBigFn("ValidatorCommittee.ValidatorShares", size, 13)
		return
	}
	for ii := 0; ii < len(v.ValidatorShares); ii++ {
		if dst, err = v.ValidatorShares[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorCommittee object
func (v *ValidatorCommittee) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'CommitteeID'
	copy(v.CommitteeID[:], buf[0:32])

	// Offset (1) 'ValidatorShares'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'ValidatorShares'
	{
		buf = tail[o1:]
		num, err := ssz.DivideInt2(len(buf), 350, 13)
		if err != nil {
			return err
		}
		v.ValidatorShares = make([]*ValidatorShare, num)
		for ii := 0; ii < num; ii++ {
			if v.ValidatorShares[ii] == nil {
				v.ValidatorShares[ii] = new(ValidatorShare)
			}
			if err = v.ValidatorShares[ii].UnmarshalSSZ(buf[ii*350 : (ii+1)*350]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorCommittee object
func (v *ValidatorCommittee) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'ValidatorShares'
	size += len(v.ValidatorShares) * 350

	return
}

// HashTreeRoot ssz hashes the ValidatorCommittee object
func (v *ValidatorCommittee) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorCommittee object with a hasher
func (v *ValidatorCommittee) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'CommitteeID'
	hh.PutBytes(v.CommitteeID[:])

	// Field (1) 'ValidatorShares'
	{
		subIndx := hh.Index()
		num := uint64(len(v.ValidatorShares))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range v.ValidatorShares {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ValidatorCommittee object
func (v *ValidatorCommittee) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
