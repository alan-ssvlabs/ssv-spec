// Code generated by fastssz. DO NOT EDIT.
// Hash: 297ce662878d2d6e9020b2ae69b6a06bf68e85717fe7f1cb3d8a23c99848fbde
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the CBSigningRequest object
func (c *CBSigningRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CBSigningRequest object to a target array
func (c *CBSigningRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Root'
	dst = append(dst, c.Root[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the CBSigningRequest object
func (c *CBSigningRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Root'
	copy(c.Root[:], buf[0:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CBSigningRequest object
func (c *CBSigningRequest) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the CBSigningRequest object
func (c *CBSigningRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CBSigningRequest object with a hasher
func (c *CBSigningRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Root'
	hh.PutBytes(c.Root[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CBSigningRequest object
func (c *CBSigningRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the CBPartialSignatures object
func (c *CBPartialSignatures) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CBPartialSignatures object to a target array
func (c *CBPartialSignatures) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(36)

	// Field (0) 'RequestRoot'
	dst = append(dst, c.RequestRoot[:]...)

	// Offset (1) 'PartialSig'
	dst = ssz.WriteOffset(dst, offset)

	// Field (1) 'PartialSig'
	if dst, err = c.PartialSig.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CBPartialSignatures object
func (c *CBPartialSignatures) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 36 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'RequestRoot'
	copy(c.RequestRoot[:], buf[0:32])

	// Offset (1) 'PartialSig'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 != 36 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'PartialSig'
	{
		buf = tail[o1:]
		if err = c.PartialSig.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CBPartialSignatures object
func (c *CBPartialSignatures) SizeSSZ() (size int) {
	size = 36

	// Field (1) 'PartialSig'
	size += c.PartialSig.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the CBPartialSignatures object
func (c *CBPartialSignatures) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CBPartialSignatures object with a hasher
func (c *CBPartialSignatures) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'RequestRoot'
	hh.PutBytes(c.RequestRoot[:])

	// Field (1) 'PartialSig'
	if err = c.PartialSig.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CBPartialSignatures object
func (c *CBPartialSignatures) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
