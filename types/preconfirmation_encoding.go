// Code generated by fastssz. DO NOT EDIT.
// Hash: 6ed72836b8c0159d2c3c1258caea556cb227d94fa72d01953f6c77e1f0a2494b
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PreconfRequest object
func (p *PreconfRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PreconfRequest object to a target array
func (p *PreconfRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Root'
	dst = append(dst, p.Root[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the PreconfRequest object
func (p *PreconfRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Root'
	copy(p.Root[:], buf[0:32])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PreconfRequest object
func (p *PreconfRequest) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the PreconfRequest object
func (p *PreconfRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PreconfRequest object with a hasher
func (p *PreconfRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Root'
	hh.PutBytes(p.Root[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PreconfRequest object
func (p *PreconfRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the SignedPreconfRequest object
func (s *SignedPreconfRequest) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedPreconfRequest object to a target array
func (s *SignedPreconfRequest) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Root'
	dst = append(dst, s.Root[:]...)

	// Field (1) 'Signature'
	dst = append(dst, s.Signature[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedPreconfRequest object
func (s *SignedPreconfRequest) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Root'
	copy(s.Root[:], buf[0:32])

	// Field (1) 'Signature'
	copy(s.Signature[:], buf[32:128])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedPreconfRequest object
func (s *SignedPreconfRequest) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the SignedPreconfRequest object
func (s *SignedPreconfRequest) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedPreconfRequest object with a hasher
func (s *SignedPreconfRequest) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Root'
	hh.PutBytes(s.Root[:])

	// Field (1) 'Signature'
	hh.PutBytes(s.Signature[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedPreconfRequest object
func (s *SignedPreconfRequest) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
