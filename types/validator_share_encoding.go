// Code generated by fastssz. DO NOT EDIT.
// Hash: b410c854425128232c3024ea9cfdab3551a44ad7d14f0613fda645158009c4ba
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ValidatorShare object
func (v *ValidatorShare) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the ValidatorShare object to a target array
func (v *ValidatorShare) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(v.OperatorID))

	// Field (1) 'OperatorPubKey'
	if size := len(v.OperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("ValidatorShare.OperatorPubKey", size, 294)
		return
	}
	dst = append(dst, v.OperatorPubKey...)

	// Field (2) 'SharePubKey'
	if size := len(v.SharePubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("ValidatorShare.SharePubKey", size, 48)
		return
	}
	dst = append(dst, v.SharePubKey...)

	return
}

// UnmarshalSSZ ssz unmarshals the ValidatorShare object
func (v *ValidatorShare) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 350 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	v.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'OperatorPubKey'
	if cap(v.OperatorPubKey) == 0 {
		v.OperatorPubKey = make([]byte, 0, len(buf[8:302]))
	}
	v.OperatorPubKey = append(v.OperatorPubKey, buf[8:302]...)

	// Field (2) 'SharePubKey'
	if cap(v.SharePubKey) == 0 {
		v.SharePubKey = make([]byte, 0, len(buf[302:350]))
	}
	v.SharePubKey = append(v.SharePubKey, buf[302:350]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ValidatorShare object
func (v *ValidatorShare) SizeSSZ() (size int) {
	size = 350
	return
}

// HashTreeRoot ssz hashes the ValidatorShare object
func (v *ValidatorShare) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the ValidatorShare object with a hasher
func (v *ValidatorShare) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(v.OperatorID))

	// Field (1) 'OperatorPubKey'
	if size := len(v.OperatorPubKey); size != 294 {
		err = ssz.ErrBytesLengthFn("ValidatorShare.OperatorPubKey", size, 294)
		return
	}
	hh.PutBytes(v.OperatorPubKey)

	// Field (2) 'SharePubKey'
	if size := len(v.SharePubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("ValidatorShare.SharePubKey", size, 48)
		return
	}
	hh.PutBytes(v.SharePubKey)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ValidatorShare object
func (v *ValidatorShare) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
