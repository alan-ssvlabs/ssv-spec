// Code generated by fastssz. DO NOT EDIT.
// Hash: f423bbb20748f459631652ddd39234242328b9a596f809195a5aa90b279105ac
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SSVMessage object
func (s *SSVMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SSVMessage object to a target array
func (s *SSVMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(68)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint64(dst, uint64(s.MsgType))

	// Field (1) 'MsgID'
	dst = append(dst, s.MsgID[:]...)

	// Offset (2) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Data)

	// Field (2) 'Data'
	if size := len(s.Data); size > 6291829 {
		err = ssz.ErrBytesLengthFn("SSVMessage.Data", size, 6291829)
		return
	}
	dst = append(dst, s.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the SSVMessage object
func (s *SSVMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 68 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'MsgType'
	s.MsgType = MsgType(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'MsgID'
	copy(s.MsgID[:], buf[8:64])

	// Offset (2) 'Data'
	if o2 = ssz.ReadOffset(buf[64:68]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 68 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Data'
	{
		buf = tail[o2:]
		if len(buf) > 6291829 {
			return ssz.ErrBytesLength
		}
		if cap(s.Data) == 0 {
			s.Data = make([]byte, 0, len(buf))
		}
		s.Data = append(s.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SSVMessage object
func (s *SSVMessage) SizeSSZ() (size int) {
	size = 68

	// Field (2) 'Data'
	size += len(s.Data)

	return
}

// HashTreeRoot ssz hashes the SSVMessage object
func (s *SSVMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SSVMessage object with a hasher
func (s *SSVMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint64(uint64(s.MsgType))

	// Field (1) 'MsgID'
	hh.PutBytes(s.MsgID[:])

	// Field (2) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.Data))
		if byteLen > 6291829 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(s.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (6291829+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SSVMessage object
func (s *SSVMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the SignedSSVMessage object
func (s *SignedSSVMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedSSVMessage object to a target array
func (s *SignedSSVMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'OperatorID'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.OperatorID) * 8

	// Offset (1) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(s.Signature); ii++ {
		offset += 4
		offset += len(s.Signature[ii])
	}

	// Offset (2) 'SSVMessage'
	dst = ssz.WriteOffset(dst, offset)
	if s.SSVMessage == nil {
		s.SSVMessage = new(SSVMessage)
	}
	offset += s.SSVMessage.SizeSSZ()

	// Field (0) 'OperatorID'
	if size := len(s.OperatorID); size > 13 {
		err = ssz.ErrListTooBigFn("SignedSSVMessage.OperatorID", size, 13)
		return
	}
	for ii := 0; ii < len(s.OperatorID); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(s.OperatorID[ii]))
	}

	// Field (1) 'Signature'
	if size := len(s.Signature); size > 13 {
		err = ssz.ErrListTooBigFn("SignedSSVMessage.Signature", size, 13)
		return
	}
	{
		offset = 4 * len(s.Signature)
		for ii := 0; ii < len(s.Signature); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(s.Signature[ii])
		}
	}
	for ii := 0; ii < len(s.Signature); ii++ {
		if size := len(s.Signature[ii]); size > 512 {
			err = ssz.ErrBytesLengthFn("SignedSSVMessage.Signature[ii]", size, 512)
			return
		}
		dst = append(dst, s.Signature[ii]...)
	}

	// Field (2) 'SSVMessage'
	if dst, err = s.SSVMessage.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedSSVMessage object
func (s *SignedSSVMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2 uint64

	// Offset (0) 'OperatorID'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Signature'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'SSVMessage'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'OperatorID'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 8, 13)
		if err != nil {
			return err
		}
		s.OperatorID = ssz.ExtendUint64(s.OperatorID, num)
		for ii := 0; ii < num; ii++ {
			s.OperatorID[ii] = OperatorID(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (1) 'Signature'
	{
		buf = tail[o1:o2]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		s.Signature = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 512 {
				return ssz.ErrBytesLength
			}
			if cap(s.Signature[indx]) == 0 {
				s.Signature[indx] = make([]byte, 0, len(buf))
			}
			s.Signature[indx] = append(s.Signature[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (2) 'SSVMessage'
	{
		buf = tail[o2:]
		if s.SSVMessage == nil {
			s.SSVMessage = new(SSVMessage)
		}
		if err = s.SSVMessage.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedSSVMessage object
func (s *SignedSSVMessage) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'OperatorID'
	size += len(s.OperatorID) * 8

	// Field (1) 'Signature'
	for ii := 0; ii < len(s.Signature); ii++ {
		size += 4
		size += len(s.Signature[ii])
	}

	// Field (2) 'SSVMessage'
	if s.SSVMessage == nil {
		s.SSVMessage = new(SSVMessage)
	}
	size += s.SSVMessage.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedSSVMessage object
func (s *SignedSSVMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedSSVMessage object with a hasher
func (s *SignedSSVMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	{
		if size := len(s.OperatorID); size > 13 {
			err = ssz.ErrListTooBigFn("SignedSSVMessage.OperatorID", size, 13)
			return
		}
		subIndx := hh.Index()
		for _, i := range s.OperatorID {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(s.OperatorID))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(13, numItems, 8))
	}

	// Field (1) 'Signature'
	{
		subIndx := hh.Index()
		num := uint64(len(s.Signature))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range s.Signature {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 512 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (512+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (2) 'SSVMessage'
	if err = s.SSVMessage.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedSSVMessage object
func (s *SignedSSVMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
