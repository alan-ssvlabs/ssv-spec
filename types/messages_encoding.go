// Code generated by fastssz. DO NOT EDIT.
// Hash: 5531456b0862c42236f8f810ebb855a85abe8316f714607db6ea03de509f5986
// Version: 0.1.3
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the SSVMessage object
func (s *SSVMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SSVMessage object to a target array
func (s *SSVMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(68)

	// Field (0) 'MsgType'
	dst = ssz.MarshalUint64(dst, uint64(s.MsgType))

	// Field (1) 'MsgID'
	dst = append(dst, s.MsgID[:]...)

	// Offset (2) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Data)

	// Field (2) 'Data'
	if size := len(s.Data); size > 6291829 {
		err = ssz.ErrBytesLengthFn("SSVMessage.Data", size, 6291829)
		return
	}
	dst = append(dst, s.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the SSVMessage object
func (s *SSVMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 68 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'MsgType'
	s.MsgType = MsgType(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'MsgID'
	copy(s.MsgID[:], buf[8:64])

	// Offset (2) 'Data'
	if o2 = ssz.ReadOffset(buf[64:68]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 68 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Data'
	{
		buf = tail[o2:]
		if len(buf) > 6291829 {
			return ssz.ErrBytesLength
		}
		if cap(s.Data) == 0 {
			s.Data = make([]byte, 0, len(buf))
		}
		s.Data = append(s.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SSVMessage object
func (s *SSVMessage) SizeSSZ() (size int) {
	size = 68

	// Field (2) 'Data'
	size += len(s.Data)

	return
}

// HashTreeRoot ssz hashes the SSVMessage object
func (s *SSVMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SSVMessage object with a hasher
func (s *SSVMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'MsgType'
	hh.PutUint64(uint64(s.MsgType))

	// Field (1) 'MsgID'
	hh.PutBytes(s.MsgID[:])

	// Field (2) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.Data))
		if byteLen > 6291829 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(s.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (6291829+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SSVMessage object
func (s *SSVMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}

// MarshalSSZ ssz marshals the SignedSSVMessage object
func (s *SignedSSVMessage) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedSSVMessage object to a target array
func (s *SignedSSVMessage) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(16)

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(s.OperatorID))

	// Offset (1) 'Signature'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Signature)

	// Offset (2) 'Data'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(s.Data)

	// Field (1) 'Signature'
	if size := len(s.Signature); size > 512 {
		err = ssz.ErrBytesLengthFn("SignedSSVMessage.Signature", size, 512)
		return
	}
	dst = append(dst, s.Signature...)

	// Field (2) 'Data'
	if size := len(s.Data); size > 8388672 {
		err = ssz.ErrBytesLengthFn("SignedSSVMessage.Data", size, 8388672)
		return
	}
	dst = append(dst, s.Data...)

	return
}

// UnmarshalSSZ ssz unmarshals the SignedSSVMessage object
func (s *SignedSSVMessage) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 16 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o2 uint64

	// Field (0) 'OperatorID'
	s.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Offset (1) 'Signature'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 16 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (2) 'Data'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (1) 'Signature'
	{
		buf = tail[o1:o2]
		if len(buf) > 512 {
			return ssz.ErrBytesLength
		}
		if cap(s.Signature) == 0 {
			s.Signature = make([]byte, 0, len(buf))
		}
		s.Signature = append(s.Signature, buf...)
	}

	// Field (2) 'Data'
	{
		buf = tail[o2:]
		if len(buf) > 8388672 {
			return ssz.ErrBytesLength
		}
		if cap(s.Data) == 0 {
			s.Data = make([]byte, 0, len(buf))
		}
		s.Data = append(s.Data, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedSSVMessage object
func (s *SignedSSVMessage) SizeSSZ() (size int) {
	size = 16

	// Field (1) 'Signature'
	size += len(s.Signature)

	// Field (2) 'Data'
	size += len(s.Data)

	return
}

// HashTreeRoot ssz hashes the SignedSSVMessage object
func (s *SignedSSVMessage) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedSSVMessage object with a hasher
func (s *SignedSSVMessage) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(s.OperatorID))

	// Field (1) 'Signature'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.Signature))
		if byteLen > 512 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(s.Signature)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (512+31)/32)
	}

	// Field (2) 'Data'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(s.Data))
		if byteLen > 8388672 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(s.Data)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (8388672+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedSSVMessage object
func (s *SignedSSVMessage) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
