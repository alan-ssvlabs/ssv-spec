// Code generated by fastssz. DO NOT EDIT.
// Hash: 21fb6f8f24baa89eee92e27e34a513fea554bb393e52eaaf424cd6777bf3ee77
// Version: 0.1.3
package qbft

import (
	"github.com/bloxapp/ssv-spec/types"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PostConsensusSignature object
func (p *PostConsensusSignature) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PostConsensusSignature object to a target array
func (p *PostConsensusSignature) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Signature'
	if size := len(p.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("PostConsensusSignature.Signature", size, 96)
		return
	}
	dst = append(dst, p.Signature...)

	// Field (1) 'SigningRoot'
	dst = append(dst, p.SigningRoot[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the PostConsensusSignature object
func (p *PostConsensusSignature) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Signature'
	if cap(p.Signature) == 0 {
		p.Signature = types.Signature(make([]byte, 0, len(buf[0:96])))
	}
	p.Signature = append(p.Signature, buf[0:96]...)

	// Field (1) 'SigningRoot'
	copy(p.SigningRoot[:], buf[96:128])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PostConsensusSignature object
func (p *PostConsensusSignature) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the PostConsensusSignature object
func (p *PostConsensusSignature) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PostConsensusSignature object with a hasher
func (p *PostConsensusSignature) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Signature'
	if size := len(p.Signature); size != 96 {
		err = ssz.ErrBytesLengthFn("PostConsensusSignature.Signature", size, 96)
		return
	}
	hh.PutBytes(p.Signature)

	// Field (1) 'SigningRoot'
	hh.PutBytes(p.SigningRoot[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PostConsensusSignature object
func (p *PostConsensusSignature) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the CommitExtraLoad object
func (c *CommitExtraLoad) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the CommitExtraLoad object to a target array
func (c *CommitExtraLoad) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'PostConsensusSignatures'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.PostConsensusSignatures) * 128

	// Field (0) 'PostConsensusSignatures'
	if size := len(c.PostConsensusSignatures); size > 4 {
		err = ssz.ErrListTooBigFn("CommitExtraLoad.PostConsensusSignatures", size, 4)
		return
	}
	for ii := 0; ii < len(c.PostConsensusSignatures); ii++ {
		if dst, err = c.PostConsensusSignatures[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the CommitExtraLoad object
func (c *CommitExtraLoad) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'PostConsensusSignatures'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'PostConsensusSignatures'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 128, 4)
		if err != nil {
			return err
		}
		c.PostConsensusSignatures = make([]*PostConsensusSignature, num)
		for ii := 0; ii < num; ii++ {
			if c.PostConsensusSignatures[ii] == nil {
				c.PostConsensusSignatures[ii] = new(PostConsensusSignature)
			}
			if err = c.PostConsensusSignatures[ii].UnmarshalSSZ(buf[ii*128 : (ii+1)*128]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the CommitExtraLoad object
func (c *CommitExtraLoad) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'PostConsensusSignatures'
	size += len(c.PostConsensusSignatures) * 128

	return
}

// HashTreeRoot ssz hashes the CommitExtraLoad object
func (c *CommitExtraLoad) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the CommitExtraLoad object with a hasher
func (c *CommitExtraLoad) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'PostConsensusSignatures'
	{
		subIndx := hh.Index()
		num := uint64(len(c.PostConsensusSignatures))
		if num > 4 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.PostConsensusSignatures {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 4)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the CommitExtraLoad object
func (c *CommitExtraLoad) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
